= Curso de Rails de ASPgems

== Semana 1

La primera habilidad a adquirir para este curso es ser capaces de generar un CRUD utilizando
los scaffolds de Rails.

Para ello lo que haremos será comenzar a desarrollar una pequeña tienda online. Esta semana
sólo es necesario realizar la gestión de productos, es decir, su alta, edición, eliminación y, por
supuesto, una pantalla para visualizar cada registro.

Los productos tendrán los siguientes campos:

* Nombre: tipo texto, no más de 255 caracteres
* Descripción: Texto largo
* Fecha de alta en el almacén: tipo fecha ­ hora
* Fabricante: Tipo texto
* Cantidad en el almacen: Numérico

== Semana 3: Active Record

Durante esta tercera semana del curso vamos a desarrollar nuestras habilidades para ser
capaces crear migraciones que nos permitan modificar la estructura de nuestra base de datos,
aprenderemos como realizar queries usando Active Record y veremos como crear relaciones
entre nuestros modelos.

Para ello retomaremos la aplicación de tienda Online que creamos en la primera semana y la ampliaremos para recoger la siguiente funcionalidad:

* Nuestro cliente quiere que se puedan hacer compras sobre los productos que ha introducido en la base de datos usando el scaffold que desarrollamos la primera semana.
* La estructura que vamos a crear en la base de datos deberá tener por un lado una tabla pedido (Order) para la cuál realizaremos un nuevo scaffold. Este modelo almacenará el estado del pedido, medio de pago, dirección de envío, ciudad de envío, y nombre y apellidos del comprador.
* Por otro lado, para introducir cada uno de los productos que van en un pedido crearemos un modelo relación que recogerá cada línea de pedido (LineItem) que contendrá el producto que se ha comprado, la cantidad y precio por el que se ha comprado. Para crear este modelo NO lo haremos usando un scaffold para ello tendremos que usar el generador de modelos ya que no necesitamos ni el controlador ni las vistas que crearía el scaffold.
* Finalmente habrá que conectar estos dos modelos entre si y con productos.
Para realización de este ejercicio no será necesario modificar ni las vistas, ni el controlador de Order para que acepte LineItems. Esa tarea la realizaremos la semana que viene cuandoveamos las vistas y los helpers de los formularios.
* Por otro lado, a nuestro cliente se le olvido decirnos que cada producto tiene una categoría, necesaria para clasificar los productos, que se corresponderá con un varchar en base de datos.
Para esta tarea habrá que modificar la tabla Products usando para ello una migración.

https://github.com/murtra/shop/tree/beaaf4d7eb90579e10d60b3950d4bd122f2475e2

==  Semana 4: Action View & Assets Pipeline

El cuarto ejercicio del curso de Rails está centrado en las vistas, aunque para completarlo 
necesitaremos tocar un poco los modelos y ligeramente un controlador. También será el 
primero que necesitaremos programar un poco.
Para realizar el ejercicio continuaremos trabajando sobre el código de nuestra tienda Online. En 
esta ocasión nuestro cliente desea que sea posible seleccionar los productos que vamos a 
comprar directamente desde el formulario del pedido (Order).
En concreto, debemos mostrar bajo los campos del pedido, una entrada para cada LineItem, 
con su correspondiente cantidad, y un campo para seleccionar el producto que sea desea 
comprar.
Una vez se guarde este formulario, deberemos crear en base de datos un Order y un LineItem 
por cada uno de los productos que se hayan comprado.
Por otro lado, aunque en primera instancia el formulario deberá mostrar sólo una entrada de 
LineItem, deberemos tener disponible un enlace que nos permita añadir más elementos 
dinámicamente. Para ello deberemos programar esta funcionalidad usando un poco de 
javascript.
También deberemos permitir el borrado de LineItems, tanto aquellos que han sido guardados en 
base de datos como los que todavía no lo han sido.
Una vez guardado el Pedido, deberá mostrarse en la pantalla de detalle los datos básicos del 
pedido, los productos comprados, junto a su cantidad y su precio correctamente formateado.
Para finalizar, se valorará positivamente que añadir un poco de colorido a la aplicación usando 
para ello scss.

https://github.com/murtra/shop/tree/7e794ee8280ce381cee950bcde4418fe2b81c539

== Semana 5: Action Controller

Durante esta semana aprenderemos el funcionamiento de los controladores en Rails. Para ello 
necesitaremos aprender a recibir los parámetros de una request, usar filtros y gestionar la 
sesión y las cookies.
Continuando con nuestra pequeña tienda online, nuestro cliente necesita que añadamos la 
posibilidad de que los compradores puedan registrarse en la web, y por supuesto iniciar una 
sesión antes de hacer un pedido.
Para la realización de esta funcionalidad necesitaremos guardar los datos del alta de los 
usuarios: Nombre, apellidos, email, por supuesto, una contraseña (para esto nos valdría un 
scaffold). Para gestionar la contraseña del usuario deberéis usar el método 
has_secure_password de Active Record descrito en el vídeo sobre autorización en la unidad.
Por otro lado necesitaremos crear un formulario para que el usuario pueda iniciar sesión, para 
ello deberemos crear un controlador SessionsController, que será el encargado de autentificar 
al usuario, y las vistas correspondientes.
Por último deberemos habilitar unos enlaces en la cabecera para que el usuario pueda ir al 
formulario de inicio de sesión y cerrar la sesión una vez realizada la compra. También sería 
interesante, que tanto la gestión de productos como la creación de nuevos pedidos sólo fuera 
accesible estando logado en el sistema.

https://github.com/murtra/shop/tree/554edc1b95d57f4f6f604a8fb784cdd9ce3913a6

== Semana 6: Active Record: Callbacks, validations y scopes  

Esta semana vamos a profundizar un poco más con el tema de Active Record. En esta ocasión 
vamos a ver como se usan las validaciones, qué son y cómo se usan los callbacks y cómo 
podemos refactorizar nuestras queries mediante el uso de scopes. 

Para ello, vamos a añadir validaciones a todos los modelos. Sé que alguno ya lo ha hecho, pero 
el que todavía no lo haya hecho este es el momento. Las validaciones a añadir serían las 
siguientes:
Usuario:
● Campos obligatorios: nombre, email y por supuesto el password.
● Validación de que el email tiene un formato correcto.
● Validación de que el password tiene al menos 8 caracteres, al menos uno numérico, al 
menos un carácter.
Productos:
● Campos obligatorios: Nombre, fecha de registro, cantidad en el almacén, precio.
● Campos numéricos: Cantidad y precio.
● La categoría debe ser: libros, música & peliculas, electrónica, hogar, juguetes, ropa, 
comestibles, o estar vacía.
● Campo único: nombre del producto.
Pedidos:
● Campos obligatorios: Nombre del comprador y apellidos, dirección, ciudad, método de 
pago, estado.
● El método de pago debe ser: en efectivo, tarjeta o paypal.
● El estado debe ser: Pendiente, Enviado, Recibido.
Lineas de Pedido:
● Campos obligatorios: product_id, cantidad, y precio.
● Campos numérico: cantidad y precio.
Por otro lado necesitamos automatizar algunos procesos dentro de la aplicación que deberán 
ser implementados usando callbacks:
1. El campo precio de la línea de pedido no debe aparecer en el formulario, y deberá ser 
rellenado automáticamente al guardar el pedido con el precio del producto en ese 
momento.2. Al mismo tiempo, se deberá descontar la cantidad del producto que ha sido comprado 
de la tabla de productos, para mantener actualizado el número de productos en el
almacén.
3. En el formulario del Pedido, no deberá aparecer el campo estado, y deberá ser rellenado 
a ‘Pendiente’ en el momento de la creación, para la posterior revisión de un encargado.
4. En el formulario de edición de pedido se deberá poder cambiar el estado del pedido.
Por último, en la página del listado de pedido habrá que añadir una serie de filtros:
1. Por categoría
2. Cantidad de producto en el almacén.
3. Fecha de registro.
4. Fabricante.
5. Rango de precio.
Las queries necesarias para realizar estos filtros deberán ser implementadas en el modelo 
Product como scopes y usadas desde el controlador ProductsController.     

DUDAS

- diferencia métodos custom validacion 
http://www.rails-dev.com/custom-validators-in-ruby-on-rails-4
- validates :password, presence: true, length: { minimum: 8 }, on: :create     
Password can't be blank
Password can't be blank    




